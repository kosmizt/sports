import requests
import pandas as pd

def get_brasileirao_matches():
    url = "https://api.sofascore.com/api/v1/unique-tournament/325/season/56790/events/last/0"
    headers = {"User-Agent": "Mozilla/5.0"}
    r = requests.get(url, headers=headers)
    r.raise_for_status()
    data = r.json()["events"]

    matches = []
    for m in data:
        home = m["homeTeam"]["name"]
        away = m["awayTeam"]["name"]
        hg = m["homeScore"]["current"]
        ag = m["awayScore"]["current"]
        matches.append({
            "home": home,
            "away": away,
            "hg": hg,
            "ag": ag
        })
    return pd.DataFrame(matches)

def update_elo(ratings, home, away, hg, ag, k=20, hfa=100):
    rh, ra = ratings.get(home, 1500), ratings.get(away, 1500)

    # Expected scores with home advantage
    expected_h = 1 / (1 + 10 ** ((ra - (rh + hfa)) / 400))
    expected_a = 1 - expected_h

    if hg > ag:
        sh, sa = 1, 0
    elif hg < ag:
        sh, sa = 0, 1
    else:
        sh, sa = 0.5, 0.5

    ratings[home] = rh + k * (sh - expected_h)
    ratings[away] = ra + k * (sa - expected_a)
    return ratings

def compute_elo_by_round(matches):
    ratings = {}
    for _, match in matches.iterrows():
        ratings = update_elo(
            ratings, match["home"], match["away"],
            match["hg"], match["ag"]
        )
    df = pd.DataFrame(list(ratings.items()), columns=["Team", "Elo"])
    df.sort_values("Elo", ascending=False, inplace=True)
    df.reset_index(drop=True, inplace=True)
    return df

if __name__ == "__main__":
    matches = get_brasileirao_matches()
    elo_table = compute_elo_by_round(matches)
    print("\nðŸ“Š Elo Ratings after latest round:")
    print(elo_table.to_string(index=False, formatters={"Elo": "{:.1f}".format}))
